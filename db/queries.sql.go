// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package db

import (
	"context"
)

const createFeed = `-- name: CreateFeed :one
INSERT INTO feeds (title, link, updated_at)
VALUES ($1, $2, NOW())
ON CONFLICT (link)
DO UPDATE SET updated_at=NOW()
RETURNING feed_id, title, link, created_at, updated_at
`

type CreateFeedParams struct {
	Title string `json:"title"`
	Link  string `json:"link"`
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRow(ctx, createFeed, arg.Title, arg.Link)
	var i Feed
	err := row.Scan(
		&i.FeedID,
		&i.Title,
		&i.Link,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createItem = `-- name: CreateItem :one
INSERT INTO items (feed_id, title, link, updated_at)
VALUES ($1, $2, $3, NOW())
ON CONFLICT (link)
DO UPDATE SET updated_at=NOW()
RETURNING item_id, feed_id, title, link, created_at, updated_at
`

type CreateItemParams struct {
	FeedID *int32 `json:"feed_id"`
	Title  string `json:"title"`
	Link   string `json:"link"`
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Item, error) {
	row := q.db.QueryRow(ctx, createItem, arg.FeedID, arg.Title, arg.Link)
	var i Item
	err := row.Scan(
		&i.ItemID,
		&i.FeedID,
		&i.Title,
		&i.Link,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getItems = `-- name: GetItems :many
SELECT item_id, feed_id, title, link, created_at, updated_at FROM items LIMIT 20
`

func (q *Queries) GetItems(ctx context.Context) ([]Item, error) {
	rows, err := q.db.Query(ctx, getItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Item{}
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ItemID,
			&i.FeedID,
			&i.Title,
			&i.Link,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
